local tf = (import 'github.com/tf-libsonnet/core/main.libsonnet');
{
  new(
    resourceLabel,
    hybrid_machine_id=null,
    timeouts=null,
    virtual_machine_id=null
  ):: tf.withResource(type='azurerm_security_center_server_vulnerability_assessment', label=resourceLabel, attrs=self.newAttrs(hybrid_machine_id=hybrid_machine_id, timeouts=timeouts, virtual_machine_id=virtual_machine_id)),
  newAttrs(
    hybrid_machine_id=null,
    timeouts=null,
    virtual_machine_id=null
  ):: std.prune(a={
    hybrid_machine_id: hybrid_machine_id,
    timeouts: timeouts,
    virtual_machine_id: virtual_machine_id,
  }),
  timeouts:: {
    new(
      create=null,
      delete=null,
      read=null
    ):: std.prune(a={
      create: create,
      delete: delete,
      read: read,
    }),
  },
  withHybridMachineId(resourceLabel, value):: {
    resource+: {
      azurerm_security_center_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          hybrid_machine_id: value,
        },
      },
    },
  },
  withTimeouts(resourceLabel, value):: {
    resource+: {
      azurerm_security_center_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          timeouts: value,
        },
      },
    },
  },
  withTimeoutsMixin(resourceLabel, value):: {
    resource+: {
      azurerm_security_center_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          timeouts+: value,
        },
      },
    },
  },
  withVirtualMachineId(resourceLabel, value):: {
    resource+: {
      azurerm_security_center_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          virtual_machine_id: value,
        },
      },
    },
  },
}
