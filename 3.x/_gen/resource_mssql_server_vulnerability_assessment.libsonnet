local tf = (import 'github.com/tf-libsonnet/core/main.libsonnet');
{
  new(
    resourceLabel,
    server_security_alert_policy_id,
    storage_container_path,
    recurring_scans=null,
    storage_account_access_key=null,
    storage_container_sas_key=null,
    timeouts=null,
    _meta={}
  ):: tf.withResource(
    type='azurerm_mssql_server_vulnerability_assessment',
    label=resourceLabel,
    attrs=self.newAttrs(
      recurring_scans=recurring_scans,
      server_security_alert_policy_id=server_security_alert_policy_id,
      storage_account_access_key=storage_account_access_key,
      storage_container_path=storage_container_path,
      storage_container_sas_key=storage_container_sas_key,
      timeouts=timeouts
    ),
    _meta=_meta
  ),
  newAttrs(
    server_security_alert_policy_id,
    storage_container_path,
    recurring_scans=null,
    storage_account_access_key=null,
    storage_container_sas_key=null,
    timeouts=null
  ):: std.prune(a={
    recurring_scans: recurring_scans,
    server_security_alert_policy_id: server_security_alert_policy_id,
    storage_account_access_key: storage_account_access_key,
    storage_container_path: storage_container_path,
    storage_container_sas_key: storage_container_sas_key,
    timeouts: timeouts,
  }),
  recurring_scans:: {
    new(
      email_subscription_admins=null,
      emails=null,
      enabled=null
    ):: std.prune(a={
      email_subscription_admins: email_subscription_admins,
      emails: emails,
      enabled: enabled,
    }),
  },
  timeouts:: {
    new(
      create=null,
      delete=null,
      read=null,
      update=null
    ):: std.prune(a={
      create: create,
      delete: delete,
      read: read,
      update: update,
    }),
  },
  withRecurringScans(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          recurring_scans: value,
        },
      },
    },
  },
  withRecurringScansMixin(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          recurring_scans+: if std.isArray(v=value) then value else [value],
        },
      },
    },
  },
  withServerSecurityAlertPolicyId(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          server_security_alert_policy_id: value,
        },
      },
    },
  },
  withStorageAccountAccessKey(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          storage_account_access_key: value,
        },
      },
    },
  },
  withStorageContainerPath(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          storage_container_path: value,
        },
      },
    },
  },
  withStorageContainerSasKey(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          storage_container_sas_key: value,
        },
      },
    },
  },
  withTimeouts(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          timeouts: value,
        },
      },
    },
  },
  withTimeoutsMixin(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_server_vulnerability_assessment+: {
        [resourceLabel]+: {
          timeouts+: value,
        },
      },
    },
  },
}
