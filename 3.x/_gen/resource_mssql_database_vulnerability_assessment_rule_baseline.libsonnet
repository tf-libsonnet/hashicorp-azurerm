local tf = (import 'github.com/tf-libsonnet/core/main.libsonnet');
{
  new(
    resourceLabel,
    baseline_name=null,
    database_name,
    rule_id,
    server_vulnerability_assessment_id,
    baseline_result=null,
    timeouts=null
  ):: tf.withResource(type='azurerm_mssql_database_vulnerability_assessment_rule_baseline', label=resourceLabel, attrs=self.newAttrs(
    baseline_name=baseline_name,
    database_name=database_name,
    rule_id=rule_id,
    server_vulnerability_assessment_id=server_vulnerability_assessment_id,
    baseline_result=baseline_result,
    timeouts=timeouts
  )),
  newAttrs(
    baseline_name=null,
    database_name,
    rule_id,
    server_vulnerability_assessment_id,
    timeouts=null,
    baseline_result=null
  ):: std.prune(a={
    baseline_name: baseline_name,
    database_name: database_name,
    rule_id: rule_id,
    server_vulnerability_assessment_id: server_vulnerability_assessment_id,
    timeouts: timeouts,
    baseline_result: baseline_result,
  }),
  withServerVulnerabilityAssessmentId(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          server_vulnerability_assessment_id: value,
        },
      },
    },
  },
  withBaselineName(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          baseline_name: value,
        },
      },
    },
  },
  withDatabaseName(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          database_name: value,
        },
      },
    },
  },
  withRuleId(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          rule_id: value,
        },
      },
    },
  },
  withBaselineResult(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          baseline_result: value,
        },
      },
    },
  },
  withBaselineResultMixin(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          baseline_result+: if std.isArray(v=value) then value else [value],
        },
      },
    },
  },
  baseline_result:: {
    new(
      result
    ):: std.prune(a={
      result: result,
    }),
  },
  withTimeouts(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          timeouts: value,
        },
      },
    },
  },
  withTimeoutsMixin(resourceLabel, value):: {
    resource+: {
      azurerm_mssql_database_vulnerability_assessment_rule_baseline+: {
        [resourceLabel]+: {
          timeouts+: value,
        },
      },
    },
  },
  timeouts:: {
    new(
      create=null,
      delete=null,
      read=null,
      update=null
    ):: std.prune(a={
      create: create,
      delete: delete,
      read: read,
      update: update,
    }),
  },
}
